Automation Testing :
-----------------
Testing any application feature with the help of Automation Tool.

Automation Tool :
-------------------
1.selenium 
2.sahi
3.sahi pro
4.protector
5.Appium - mobile Automation 

Manual DisAdv
--------------------
1.require more resources 
2. its time consuming 
3.comaptibility testing --diifcutlt and time consuming 
4.Regression Testing --time consuming 
5.test cycle Duration incearse
6.require more human efforts / human error 


Automation Adv
-------------------------
1. less resources required 
2.Regression Testing and crossBrowser Testing - its easy and less time required 
3.Test cycle duration decrease
4.Reusability of script 

test Script --- test case convert program 

-----------------------------------------------------------------------------------
Selenium 

Why selenium ? / Adv Selenium 

----------
Open source tool --- freely avilable -- licence No 
supported by multiple lang --- java ,python ,javascript,ruby,pearl ....
supported for Cross Browser Test
support multiple O.S.

DisAdv Selenium
--------------------------
1. we can automate only web application . 
  .we can not automate standalone application ex. calculator 
2. we can not handle captcha and barcode .
3. File upload and download task -- we can not handle 
   we use third party tool - AutoIT / Robot class 

===============================================================

Selenium Architecture 

Search context (I)-extends -WebDriver (I)--implements-- Remote WebDriver class (c) --extends- multiple Browser Driver classes (c)

==========================================================================
Project Maven 

maven -- build managment tool

src/main/java
src/main/resources
src/test/java
src/test/resources
pom.xml  -----depedancy add -https://mvnrepository.com/
=================================================================
Browser Open 

ex .test case 

open browser - chrome 
enter valid value - email
enter valid value - password
click on login button 

WebElement -- anything on webpage 
txt field ,button ,image,link ,checkbox,radio button

Locators : we identify webelement using Locators
         : 8 Type of locator
         
         1.classname
         2.name
         3.id
         4.tagname
         5.xpath
         6.linktext
         7.partial link text
         8.CSS selector
         
         //name locator 
         
         WebElement EmailId=driver.findElement(By.name("email"));
         
         EmailId.sendKeys("Test@gmail.com");
         
         WebElement password=driver.findElement(By.name("pass"));
         
         password.sendKeys("12345678");
         
         WebElement loginBtn=driver.findElement(By.name("login"));
         
         loginBtn.click();
---------------
Task Url : https://demo.guru99.com/test/newtours/register_sucess.php

ID locator :

WebElement element=driver.findElement(By.Id(""));
---------------------------------------------------------
Xpath locator

Dom Structrue :

tagname : anything after <
        ex .input,div,li,a,button
        
attributename="attribute value"

EX .value="1"
    id="u_0_5_by"
    
text :
    
   >text<
   EX .>Forgotten password?<

Xpath locator : Identify the WebElement 

1. Absolute Xpath (/)
----------------------
parent node -- immidiate chide node -- element node 

-- start with "/"

WebElement element =driver.findElement(By.xpath("/html/body/div[1]/div[1]/div[1]/div/div/div/div[2]/div/div[1]/form/div[1]/div[1]/input"));

=========================================
2. Relative Xpath (//)

tagname 
attributename="attribute value"
>text<

parent to any child 
child node --> eleent identify 

1. Xpath by attribute :
-------------------------------
//tagname[@attributename='attribute value']

EX.//input[@name='firstName']

driver.findElement(By.xpath("//input[@name='firstName']"));

2.Xpath by text() 
--------------------------------
//tagname[text()='text value']

EX .//a[text()='Forgotten password?']

driver.findElement(By.xpath("//a[text()='Forgotten password?']"));

3. Xpath by Contains()
--------------------------------
//tagname[contains(@attributename,'attribute static value')]
//tagname[contains(text(),'partial text value')]

EX.//button[contains(@id,'u_0_5')]

driver.findElement(By.xpath("//button[contains(@id,'u_0_5')]"))

EX .//a[contains(text(),'Forgotten ')]

driver.findElement(By.xpath("//a[contains(text(),'Forgotten ')]"))

4. Xpath by index 
---------------------------------

(Xpath expression)[index]

EX .(//input[@type='text'])[3]

WebElement element=driver.findElement(By.xpath("(//input[@type='text'])[3]"))

================================================================

List<WebElement> Element=driver.findElements(By.xpath("//input[@type='text']"));

formula
------------------
//tagname[@attribute name='value']

//tagname[text()='text value']

//tagname[contains(@attribute name ,'Static value')]
//tagname[contains(text(),'partial value ')]

(xpath expression)[index]
-----------------------------------------------------------------------
How to handle DropDOwn ?

Element -- tagname -- select -- select class -- Drop Down handle 

// identify element
WebElement element=driver.findElement(By.xpath("xpath expression"));
// Object create select class
Select dropDown=new Select(element);

// object
dropDown.selectByIndex(12); // 1,70,23,

dropDown.selectByValue("value");

dropDown.selectByVisibletext("text");

============================================================
How to capture Screenshot ?
======================================
Full webpage :

TakesScrrenshot ts=driver;
File Src=ts.getscreenshotAs(OutPutType.FILE);
File destn=new File("location\\test.png");
FileUtils.copyFile(Src,destn);

Element /Sections :
=========================================
Scrolling on Webpage 
Max pixel size of webpage  =document.body.scrollHeight
pixel :

JavaScriptExecutor js=driver; 
//
top -bottom
js.executeScript("window.scrollBy(0,400)","");

bottom -top
js.executeScript("window.scrollBy(0,-400)","");


element 
---------
WebElement element=driver.findElement(By.xpath(""));
JavaScriptExecutor js=driver; 
js.executeScript("arguments[0].scrollIntoView();",element);

=================================================================
Actions class 

mouse movement and keyboard action action --Actions class

mouse Hover + click 

click(element) +click (option element)

right click --context click (element)
double click -- 

drag and drop --

KeyDown()
KeyUp()

Actions act=new Actions(driver);

===============================================================
Pop Up handle

1. Alert 
2 .CHild browser window pop Up

Alert handle :
--------------------
confirmation /warning /user input 

simple alert --notification -- ok 
confirmation alert -- confirmation -- ok/cancel
prompt Alert -- alert user input -- 0k/cancel


Alert alt=driver.switchto().alert();

alt.gettext(); // string - alert text
alt.accept();  // click OK button 
alt.dismiss(); // click Cancel Button 
==========================================

Child Browser window Pop Up handle

string ParenWindowID=driver.getwindowhandle(); // parent window ID/address -- string 
Set<String> AllID=driver.getwindowhandles(); // parent +child Window ID/Address -- Set<String>

List<String>list=new ArrayList<String>(AllID);

list.get(0); //
list.get(1); //

driver.switchto().window(child window ID);
driver.switchto().window(ParenWindowID);
================================================
test data from Excel 

multiple sheet 
(row,column)

apache POI 
--------------
apache POI common 
apache POI OOXML

==========================

Excel ---

double .0 --- string --- element 

==================================================
How Iframe /frame handle 

switch --- 

frame : webpage vertically /horizontally spilt .
        frame frameset tag HTML -- deprecated HTML5
        
Iframe (Inline frame): html webpage emmbeddded another html page
       : content diffrent resources /Adv  
       
     driver.switchto().frame(0);  // index 
     driver.switchto().frame(WebElement element);
     driver.switchto().frame(String name or ID);

Scenario 1 : one webpage --- have multipe frame 

 driver.switchto().frame(element) // MainWebpage -- frame 1
 driver.switchto().deafultcontent(); // frame1 ---> Mainpage 
 
 driver.switchto().frame(element) // MainWebpage -- frame 2
 driver.switchto().deafultcontent(); // frame2 ---> Mainpage

Scenario 2 : Mainpage ---outter frame ---inner frame

driver.switchto().frame(element) // MainWebpage -- Ouuterframe
driver.switchto().frame(element) // Ouuterframe -- inneriframe
// Webelement -inner iframe handle 

driver.switchto().parentframe();  //inneriframe--outterframe
driver.switchto().deafultcontent(); //outterframe--mainpage 









